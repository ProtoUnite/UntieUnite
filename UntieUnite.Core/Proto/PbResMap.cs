// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: Proto/PbResMap.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace PbSerial {

  /// <summary>Holder for reflection information generated from Proto/PbResMap.proto</summary>
  public static partial class PbResMapReflection {

    #region Descriptor
    /// <summary>File descriptor for Proto/PbResMap.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static PbResMapReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChRQcm90by9QYlJlc01hcC5wcm90bxIIUGJTZXJpYWwinQIKCVBiUmVzTm9k",
            "ZRIKCgJJZBgBIAEoBRIVCg1Bc3NldE5hbWVIYXNoGAIgASgNEgsKA0xvZBgD",
            "IAEoBRISCgpBc3NldEV4dElkGAQgASgFEhQKDEFzc2V0RnVuVHlwZRgFIAEo",
            "BRIUCgxBc3NldExvY1R5cGUYBiABKAUSEQoJUmVzUGF0aElkGAcgASgFEhMK",
            "C1Jlc1BhdGhBYklkGAggASgFEhEKCVJlc1R5cGVJZBgJIAEoBRIRCglLZWVw",
            "SW5NZW0YCiABKAgSDwoHRXh0cmFjdBgLIAEoCBIYChBFeHRyYWN0aW9uUGF0",
            "aElkGAwgASgFEhQKDElzSW5PdGhlckRMQxgNIAEoBRIRCglEZXBlbmRJZHMY",
            "ECADKAUiaQoNUGJBc3NldEJ1bmRsZRIMCgRuYW1lGAEgASgJEgwKBEFiSWQY",
            "AiABKAUSEwoLU2VjdXJpdHlLZXkYBSABKAkSDwoHY29udGVudBgDIAMoCRIW",
            "Cg5jb250ZW50SW5kaWNlcxgEIAMoBSJHCglQYkRsY05vZGUSEgoKYnVuZGxl",
            "TmFtZRgBIAEoCRILCgNtZDUYAiABKAkSDAoEc2l6ZRgDIAEoDRILCgNsb2QY",
            "BCABKAUi9wgKCFBiUmVzTWFwEg8KB3ZlcnNpb24YASABKAkSGwoTYnVuZGxl",
            "X3ZlcnNpb25fbmFtZRgDIAEoCRIbChNidW5kbGVfdmVyc2lvbl9jb2RlGAQg",
            "ASgFEhoKEmdjbG91ZF9yZXNfdmVyc2lvbhgFIAEoBRIdChViYXR0bGVfbWF0",
            "Y2hfdmVyc2lvbjAYBiABKAQSHQoVYmF0dGxlX21hdGNoX3ZlcnNpb24xGAcg",
            "ASgEEh8KF2JhdHRsZV9jb21wbGV0ZV92ZXJzaW9uGAggASgFEiMKG2JhdHRs",
            "ZV9tYXRjaF9zaWduYXR1cmVfY29kZRgJIAEoCRIiChpiYXR0bGVfbWF0Y2hf",
            "c2lnbmF0dXJlX3JlcxgKIAEoCRIkChxiYXR0bGVfbWF0Y2hfc2lnbmF0dXJl",
            "X3RhYmxlGAsgASgFEkIKEEhhc2hUb0Fzc2V0TmFtZXMYDCADKAsyKC5QYlNl",
            "cmlhbC5QYlJlc01hcC5IYXNoVG9Bc3NldE5hbWVzRW50cnkSKAoLcmVzTm9k",
            "ZUxpc3QYDSADKAsyEy5QYlNlcmlhbC5QYlJlc05vZGUSLQoMYXNzZXRidW5k",
            "bGVzGA4gAygLMhcuUGJTZXJpYWwuUGJBc3NldEJ1bmRsZRIlCghEbGNOb2Rl",
            "cxgPIAMoCzITLlBiU2VyaWFsLlBiRGxjTm9kZRI2CgpFeHRTdHJQb29sGBEg",
            "AygLMiIuUGJTZXJpYWwuUGJSZXNNYXAuRXh0U3RyUG9vbEVudHJ5EkQKEUV4",
            "dHJhY1BhdGhTdHJQb29sGBIgAygLMikuUGJTZXJpYWwuUGJSZXNNYXAuRXh0",
            "cmFjUGF0aFN0clBvb2xFbnRyeRI4CgtUeXBlU3RyUG9vbBgTIAMoCzIjLlBi",
            "U2VyaWFsLlBiUmVzTWFwLlR5cGVTdHJQb29sRW50cnkSPgoOUmVzUGF0aFN0",
            "clBvb2wYFCADKAsyJi5QYlNlcmlhbC5QYlJlc01hcC5SZXNQYXRoU3RyUG9v",
            "bEVudHJ5EjYKCkhhc2hUb01kNXMYFSADKAsyIi5QYlNlcmlhbC5QYlJlc01h",
            "cC5IYXNoVG9NZDVzRW50cnkaNwoVSGFzaFRvQXNzZXROYW1lc0VudHJ5EgsK",
            "A2tleRgBIAEoDRINCgV2YWx1ZRgCIAEoCToCOAEaMQoPRXh0U3RyUG9vbEVu",
            "dHJ5EgsKA2tleRgBIAEoBRINCgV2YWx1ZRgCIAEoCToCOAEaOAoWRXh0cmFj",
            "UGF0aFN0clBvb2xFbnRyeRILCgNrZXkYASABKAUSDQoFdmFsdWUYAiABKAk6",
            "AjgBGjIKEFR5cGVTdHJQb29sRW50cnkSCwoDa2V5GAEgASgFEg0KBXZhbHVl",
            "GAIgASgJOgI4ARo1ChNSZXNQYXRoU3RyUG9vbEVudHJ5EgsKA2tleRgBIAEo",
            "BRINCgV2YWx1ZRgCIAEoCToCOAEaMQoPSGFzaFRvTWQ1c0VudHJ5EgsKA2tl",
            "eRgBIAEoDRINCgV2YWx1ZRgCIAEoCToCOAFCC6oCCFBiU2VyaWFsYgZwcm90",
            "bzM="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::PbSerial.PbResNode), global::PbSerial.PbResNode.Parser, new[]{ "Id", "AssetNameHash", "Lod", "AssetExtId", "AssetFunType", "AssetLocType", "ResPathId", "ResPathAbId", "ResTypeId", "KeepInMem", "Extract", "ExtractionPathId", "IsInOtherDLC", "DependIds" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PbSerial.PbAssetBundle), global::PbSerial.PbAssetBundle.Parser, new[]{ "Name", "AbId", "SecurityKey", "Content", "ContentIndices" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PbSerial.PbDlcNode), global::PbSerial.PbDlcNode.Parser, new[]{ "BundleName", "Md5", "Size", "Lod" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PbSerial.PbResMap), global::PbSerial.PbResMap.Parser, new[]{ "Version", "BundleVersionName", "BundleVersionCode", "GcloudResVersion", "BattleMatchVersion0", "BattleMatchVersion1", "BattleCompleteVersion", "BattleMatchSignatureCode", "BattleMatchSignatureRes", "BattleMatchSignatureTable", "HashToAssetNames", "ResNodeList", "Assetbundles", "DlcNodes", "ExtStrPool", "ExtracPathStrPool", "TypeStrPool", "ResPathStrPool", "HashToMd5S" }, null, null, new pbr::GeneratedClrTypeInfo[] { null, null, null, null, null, null, })
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class PbResNode : pb::IMessage<PbResNode> {
    private static readonly pb::MessageParser<PbResNode> _parser = new pb::MessageParser<PbResNode>(() => new PbResNode());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PbResNode> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PbSerial.PbResMapReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PbResNode() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PbResNode(PbResNode other) : this() {
      id_ = other.id_;
      assetNameHash_ = other.assetNameHash_;
      lod_ = other.lod_;
      assetExtId_ = other.assetExtId_;
      assetFunType_ = other.assetFunType_;
      assetLocType_ = other.assetLocType_;
      resPathId_ = other.resPathId_;
      resPathAbId_ = other.resPathAbId_;
      resTypeId_ = other.resTypeId_;
      keepInMem_ = other.keepInMem_;
      extract_ = other.extract_;
      extractionPathId_ = other.extractionPathId_;
      isInOtherDLC_ = other.isInOtherDLC_;
      dependIds_ = other.dependIds_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PbResNode Clone() {
      return new PbResNode(this);
    }

    /// <summary>Field number for the "Id" field.</summary>
    public const int IdFieldNumber = 1;
    private int id_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "AssetNameHash" field.</summary>
    public const int AssetNameHashFieldNumber = 2;
    private uint assetNameHash_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint AssetNameHash {
      get { return assetNameHash_; }
      set {
        assetNameHash_ = value;
      }
    }

    /// <summary>Field number for the "Lod" field.</summary>
    public const int LodFieldNumber = 3;
    private int lod_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Lod {
      get { return lod_; }
      set {
        lod_ = value;
      }
    }

    /// <summary>Field number for the "AssetExtId" field.</summary>
    public const int AssetExtIdFieldNumber = 4;
    private int assetExtId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int AssetExtId {
      get { return assetExtId_; }
      set {
        assetExtId_ = value;
      }
    }

    /// <summary>Field number for the "AssetFunType" field.</summary>
    public const int AssetFunTypeFieldNumber = 5;
    private int assetFunType_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int AssetFunType {
      get { return assetFunType_; }
      set {
        assetFunType_ = value;
      }
    }

    /// <summary>Field number for the "AssetLocType" field.</summary>
    public const int AssetLocTypeFieldNumber = 6;
    private int assetLocType_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int AssetLocType {
      get { return assetLocType_; }
      set {
        assetLocType_ = value;
      }
    }

    /// <summary>Field number for the "ResPathId" field.</summary>
    public const int ResPathIdFieldNumber = 7;
    private int resPathId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ResPathId {
      get { return resPathId_; }
      set {
        resPathId_ = value;
      }
    }

    /// <summary>Field number for the "ResPathAbId" field.</summary>
    public const int ResPathAbIdFieldNumber = 8;
    private int resPathAbId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ResPathAbId {
      get { return resPathAbId_; }
      set {
        resPathAbId_ = value;
      }
    }

    /// <summary>Field number for the "ResTypeId" field.</summary>
    public const int ResTypeIdFieldNumber = 9;
    private int resTypeId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ResTypeId {
      get { return resTypeId_; }
      set {
        resTypeId_ = value;
      }
    }

    /// <summary>Field number for the "KeepInMem" field.</summary>
    public const int KeepInMemFieldNumber = 10;
    private bool keepInMem_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool KeepInMem {
      get { return keepInMem_; }
      set {
        keepInMem_ = value;
      }
    }

    /// <summary>Field number for the "Extract" field.</summary>
    public const int ExtractFieldNumber = 11;
    private bool extract_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Extract {
      get { return extract_; }
      set {
        extract_ = value;
      }
    }

    /// <summary>Field number for the "ExtractionPathId" field.</summary>
    public const int ExtractionPathIdFieldNumber = 12;
    private int extractionPathId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ExtractionPathId {
      get { return extractionPathId_; }
      set {
        extractionPathId_ = value;
      }
    }

    /// <summary>Field number for the "IsInOtherDLC" field.</summary>
    public const int IsInOtherDLCFieldNumber = 13;
    private int isInOtherDLC_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int IsInOtherDLC {
      get { return isInOtherDLC_; }
      set {
        isInOtherDLC_ = value;
      }
    }

    /// <summary>Field number for the "DependIds" field.</summary>
    public const int DependIdsFieldNumber = 16;
    private static readonly pb::FieldCodec<int> _repeated_dependIds_codec
        = pb::FieldCodec.ForInt32(130);
    private readonly pbc::RepeatedField<int> dependIds_ = new pbc::RepeatedField<int>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> DependIds {
      get { return dependIds_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PbResNode);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PbResNode other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (AssetNameHash != other.AssetNameHash) return false;
      if (Lod != other.Lod) return false;
      if (AssetExtId != other.AssetExtId) return false;
      if (AssetFunType != other.AssetFunType) return false;
      if (AssetLocType != other.AssetLocType) return false;
      if (ResPathId != other.ResPathId) return false;
      if (ResPathAbId != other.ResPathAbId) return false;
      if (ResTypeId != other.ResTypeId) return false;
      if (KeepInMem != other.KeepInMem) return false;
      if (Extract != other.Extract) return false;
      if (ExtractionPathId != other.ExtractionPathId) return false;
      if (IsInOtherDLC != other.IsInOtherDLC) return false;
      if(!dependIds_.Equals(other.dependIds_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id != 0) hash ^= Id.GetHashCode();
      if (AssetNameHash != 0) hash ^= AssetNameHash.GetHashCode();
      if (Lod != 0) hash ^= Lod.GetHashCode();
      if (AssetExtId != 0) hash ^= AssetExtId.GetHashCode();
      if (AssetFunType != 0) hash ^= AssetFunType.GetHashCode();
      if (AssetLocType != 0) hash ^= AssetLocType.GetHashCode();
      if (ResPathId != 0) hash ^= ResPathId.GetHashCode();
      if (ResPathAbId != 0) hash ^= ResPathAbId.GetHashCode();
      if (ResTypeId != 0) hash ^= ResTypeId.GetHashCode();
      if (KeepInMem != false) hash ^= KeepInMem.GetHashCode();
      if (Extract != false) hash ^= Extract.GetHashCode();
      if (ExtractionPathId != 0) hash ^= ExtractionPathId.GetHashCode();
      if (IsInOtherDLC != 0) hash ^= IsInOtherDLC.GetHashCode();
      hash ^= dependIds_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Id);
      }
      if (AssetNameHash != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(AssetNameHash);
      }
      if (Lod != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Lod);
      }
      if (AssetExtId != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(AssetExtId);
      }
      if (AssetFunType != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(AssetFunType);
      }
      if (AssetLocType != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(AssetLocType);
      }
      if (ResPathId != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(ResPathId);
      }
      if (ResPathAbId != 0) {
        output.WriteRawTag(64);
        output.WriteInt32(ResPathAbId);
      }
      if (ResTypeId != 0) {
        output.WriteRawTag(72);
        output.WriteInt32(ResTypeId);
      }
      if (KeepInMem != false) {
        output.WriteRawTag(80);
        output.WriteBool(KeepInMem);
      }
      if (Extract != false) {
        output.WriteRawTag(88);
        output.WriteBool(Extract);
      }
      if (ExtractionPathId != 0) {
        output.WriteRawTag(96);
        output.WriteInt32(ExtractionPathId);
      }
      if (IsInOtherDLC != 0) {
        output.WriteRawTag(104);
        output.WriteInt32(IsInOtherDLC);
      }
      dependIds_.WriteTo(output, _repeated_dependIds_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Id);
      }
      if (AssetNameHash != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(AssetNameHash);
      }
      if (Lod != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Lod);
      }
      if (AssetExtId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(AssetExtId);
      }
      if (AssetFunType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(AssetFunType);
      }
      if (AssetLocType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(AssetLocType);
      }
      if (ResPathId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ResPathId);
      }
      if (ResPathAbId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ResPathAbId);
      }
      if (ResTypeId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ResTypeId);
      }
      if (KeepInMem != false) {
        size += 1 + 1;
      }
      if (Extract != false) {
        size += 1 + 1;
      }
      if (ExtractionPathId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ExtractionPathId);
      }
      if (IsInOtherDLC != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(IsInOtherDLC);
      }
      size += dependIds_.CalculateSize(_repeated_dependIds_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PbResNode other) {
      if (other == null) {
        return;
      }
      if (other.Id != 0) {
        Id = other.Id;
      }
      if (other.AssetNameHash != 0) {
        AssetNameHash = other.AssetNameHash;
      }
      if (other.Lod != 0) {
        Lod = other.Lod;
      }
      if (other.AssetExtId != 0) {
        AssetExtId = other.AssetExtId;
      }
      if (other.AssetFunType != 0) {
        AssetFunType = other.AssetFunType;
      }
      if (other.AssetLocType != 0) {
        AssetLocType = other.AssetLocType;
      }
      if (other.ResPathId != 0) {
        ResPathId = other.ResPathId;
      }
      if (other.ResPathAbId != 0) {
        ResPathAbId = other.ResPathAbId;
      }
      if (other.ResTypeId != 0) {
        ResTypeId = other.ResTypeId;
      }
      if (other.KeepInMem != false) {
        KeepInMem = other.KeepInMem;
      }
      if (other.Extract != false) {
        Extract = other.Extract;
      }
      if (other.ExtractionPathId != 0) {
        ExtractionPathId = other.ExtractionPathId;
      }
      if (other.IsInOtherDLC != 0) {
        IsInOtherDLC = other.IsInOtherDLC;
      }
      dependIds_.Add(other.dependIds_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Id = input.ReadInt32();
            break;
          }
          case 16: {
            AssetNameHash = input.ReadUInt32();
            break;
          }
          case 24: {
            Lod = input.ReadInt32();
            break;
          }
          case 32: {
            AssetExtId = input.ReadInt32();
            break;
          }
          case 40: {
            AssetFunType = input.ReadInt32();
            break;
          }
          case 48: {
            AssetLocType = input.ReadInt32();
            break;
          }
          case 56: {
            ResPathId = input.ReadInt32();
            break;
          }
          case 64: {
            ResPathAbId = input.ReadInt32();
            break;
          }
          case 72: {
            ResTypeId = input.ReadInt32();
            break;
          }
          case 80: {
            KeepInMem = input.ReadBool();
            break;
          }
          case 88: {
            Extract = input.ReadBool();
            break;
          }
          case 96: {
            ExtractionPathId = input.ReadInt32();
            break;
          }
          case 104: {
            IsInOtherDLC = input.ReadInt32();
            break;
          }
          case 130:
          case 128: {
            dependIds_.AddEntriesFrom(input, _repeated_dependIds_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class PbAssetBundle : pb::IMessage<PbAssetBundle> {
    private static readonly pb::MessageParser<PbAssetBundle> _parser = new pb::MessageParser<PbAssetBundle>(() => new PbAssetBundle());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PbAssetBundle> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PbSerial.PbResMapReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PbAssetBundle() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PbAssetBundle(PbAssetBundle other) : this() {
      name_ = other.name_;
      abId_ = other.abId_;
      securityKey_ = other.securityKey_;
      content_ = other.content_.Clone();
      contentIndices_ = other.contentIndices_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PbAssetBundle Clone() {
      return new PbAssetBundle(this);
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 1;
    private string name_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "AbId" field.</summary>
    public const int AbIdFieldNumber = 2;
    private int abId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int AbId {
      get { return abId_; }
      set {
        abId_ = value;
      }
    }

    /// <summary>Field number for the "SecurityKey" field.</summary>
    public const int SecurityKeyFieldNumber = 5;
    private string securityKey_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string SecurityKey {
      get { return securityKey_; }
      set {
        securityKey_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "content" field.</summary>
    public const int ContentFieldNumber = 3;
    private static readonly pb::FieldCodec<string> _repeated_content_codec
        = pb::FieldCodec.ForString(26);
    private readonly pbc::RepeatedField<string> content_ = new pbc::RepeatedField<string>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> Content {
      get { return content_; }
    }

    /// <summary>Field number for the "contentIndices" field.</summary>
    public const int ContentIndicesFieldNumber = 4;
    private static readonly pb::FieldCodec<int> _repeated_contentIndices_codec
        = pb::FieldCodec.ForInt32(34);
    private readonly pbc::RepeatedField<int> contentIndices_ = new pbc::RepeatedField<int>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> ContentIndices {
      get { return contentIndices_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PbAssetBundle);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PbAssetBundle other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Name != other.Name) return false;
      if (AbId != other.AbId) return false;
      if (SecurityKey != other.SecurityKey) return false;
      if(!content_.Equals(other.content_)) return false;
      if(!contentIndices_.Equals(other.contentIndices_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (AbId != 0) hash ^= AbId.GetHashCode();
      if (SecurityKey.Length != 0) hash ^= SecurityKey.GetHashCode();
      hash ^= content_.GetHashCode();
      hash ^= contentIndices_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Name.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Name);
      }
      if (AbId != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(AbId);
      }
      content_.WriteTo(output, _repeated_content_codec);
      contentIndices_.WriteTo(output, _repeated_contentIndices_codec);
      if (SecurityKey.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(SecurityKey);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (AbId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(AbId);
      }
      if (SecurityKey.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(SecurityKey);
      }
      size += content_.CalculateSize(_repeated_content_codec);
      size += contentIndices_.CalculateSize(_repeated_contentIndices_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PbAssetBundle other) {
      if (other == null) {
        return;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.AbId != 0) {
        AbId = other.AbId;
      }
      if (other.SecurityKey.Length != 0) {
        SecurityKey = other.SecurityKey;
      }
      content_.Add(other.content_);
      contentIndices_.Add(other.contentIndices_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Name = input.ReadString();
            break;
          }
          case 16: {
            AbId = input.ReadInt32();
            break;
          }
          case 26: {
            content_.AddEntriesFrom(input, _repeated_content_codec);
            break;
          }
          case 34:
          case 32: {
            contentIndices_.AddEntriesFrom(input, _repeated_contentIndices_codec);
            break;
          }
          case 42: {
            SecurityKey = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class PbDlcNode : pb::IMessage<PbDlcNode> {
    private static readonly pb::MessageParser<PbDlcNode> _parser = new pb::MessageParser<PbDlcNode>(() => new PbDlcNode());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PbDlcNode> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PbSerial.PbResMapReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PbDlcNode() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PbDlcNode(PbDlcNode other) : this() {
      bundleName_ = other.bundleName_;
      md5_ = other.md5_;
      size_ = other.size_;
      lod_ = other.lod_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PbDlcNode Clone() {
      return new PbDlcNode(this);
    }

    /// <summary>Field number for the "bundleName" field.</summary>
    public const int BundleNameFieldNumber = 1;
    private string bundleName_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string BundleName {
      get { return bundleName_; }
      set {
        bundleName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "md5" field.</summary>
    public const int Md5FieldNumber = 2;
    private string md5_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Md5 {
      get { return md5_; }
      set {
        md5_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "size" field.</summary>
    public const int SizeFieldNumber = 3;
    private uint size_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Size {
      get { return size_; }
      set {
        size_ = value;
      }
    }

    /// <summary>Field number for the "lod" field.</summary>
    public const int LodFieldNumber = 4;
    private int lod_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Lod {
      get { return lod_; }
      set {
        lod_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PbDlcNode);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PbDlcNode other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (BundleName != other.BundleName) return false;
      if (Md5 != other.Md5) return false;
      if (Size != other.Size) return false;
      if (Lod != other.Lod) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (BundleName.Length != 0) hash ^= BundleName.GetHashCode();
      if (Md5.Length != 0) hash ^= Md5.GetHashCode();
      if (Size != 0) hash ^= Size.GetHashCode();
      if (Lod != 0) hash ^= Lod.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (BundleName.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(BundleName);
      }
      if (Md5.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Md5);
      }
      if (Size != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(Size);
      }
      if (Lod != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(Lod);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (BundleName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(BundleName);
      }
      if (Md5.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Md5);
      }
      if (Size != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Size);
      }
      if (Lod != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Lod);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PbDlcNode other) {
      if (other == null) {
        return;
      }
      if (other.BundleName.Length != 0) {
        BundleName = other.BundleName;
      }
      if (other.Md5.Length != 0) {
        Md5 = other.Md5;
      }
      if (other.Size != 0) {
        Size = other.Size;
      }
      if (other.Lod != 0) {
        Lod = other.Lod;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            BundleName = input.ReadString();
            break;
          }
          case 18: {
            Md5 = input.ReadString();
            break;
          }
          case 24: {
            Size = input.ReadUInt32();
            break;
          }
          case 32: {
            Lod = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class PbResMap : pb::IMessage<PbResMap> {
    private static readonly pb::MessageParser<PbResMap> _parser = new pb::MessageParser<PbResMap>(() => new PbResMap());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PbResMap> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PbSerial.PbResMapReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PbResMap() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PbResMap(PbResMap other) : this() {
      version_ = other.version_;
      bundleVersionName_ = other.bundleVersionName_;
      bundleVersionCode_ = other.bundleVersionCode_;
      gcloudResVersion_ = other.gcloudResVersion_;
      battleMatchVersion0_ = other.battleMatchVersion0_;
      battleMatchVersion1_ = other.battleMatchVersion1_;
      battleCompleteVersion_ = other.battleCompleteVersion_;
      battleMatchSignatureCode_ = other.battleMatchSignatureCode_;
      battleMatchSignatureRes_ = other.battleMatchSignatureRes_;
      battleMatchSignatureTable_ = other.battleMatchSignatureTable_;
      hashToAssetNames_ = other.hashToAssetNames_.Clone();
      resNodeList_ = other.resNodeList_.Clone();
      assetbundles_ = other.assetbundles_.Clone();
      dlcNodes_ = other.dlcNodes_.Clone();
      extStrPool_ = other.extStrPool_.Clone();
      extracPathStrPool_ = other.extracPathStrPool_.Clone();
      typeStrPool_ = other.typeStrPool_.Clone();
      resPathStrPool_ = other.resPathStrPool_.Clone();
      hashToMd5S_ = other.hashToMd5S_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PbResMap Clone() {
      return new PbResMap(this);
    }

    /// <summary>Field number for the "version" field.</summary>
    public const int VersionFieldNumber = 1;
    private string version_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Version {
      get { return version_; }
      set {
        version_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "bundle_version_name" field.</summary>
    public const int BundleVersionNameFieldNumber = 3;
    private string bundleVersionName_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string BundleVersionName {
      get { return bundleVersionName_; }
      set {
        bundleVersionName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "bundle_version_code" field.</summary>
    public const int BundleVersionCodeFieldNumber = 4;
    private int bundleVersionCode_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int BundleVersionCode {
      get { return bundleVersionCode_; }
      set {
        bundleVersionCode_ = value;
      }
    }

    /// <summary>Field number for the "gcloud_res_version" field.</summary>
    public const int GcloudResVersionFieldNumber = 5;
    private int gcloudResVersion_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int GcloudResVersion {
      get { return gcloudResVersion_; }
      set {
        gcloudResVersion_ = value;
      }
    }

    /// <summary>Field number for the "battle_match_version0" field.</summary>
    public const int BattleMatchVersion0FieldNumber = 6;
    private ulong battleMatchVersion0_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong BattleMatchVersion0 {
      get { return battleMatchVersion0_; }
      set {
        battleMatchVersion0_ = value;
      }
    }

    /// <summary>Field number for the "battle_match_version1" field.</summary>
    public const int BattleMatchVersion1FieldNumber = 7;
    private ulong battleMatchVersion1_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong BattleMatchVersion1 {
      get { return battleMatchVersion1_; }
      set {
        battleMatchVersion1_ = value;
      }
    }

    /// <summary>Field number for the "battle_complete_version" field.</summary>
    public const int BattleCompleteVersionFieldNumber = 8;
    private int battleCompleteVersion_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int BattleCompleteVersion {
      get { return battleCompleteVersion_; }
      set {
        battleCompleteVersion_ = value;
      }
    }

    /// <summary>Field number for the "battle_match_signature_code" field.</summary>
    public const int BattleMatchSignatureCodeFieldNumber = 9;
    private string battleMatchSignatureCode_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string BattleMatchSignatureCode {
      get { return battleMatchSignatureCode_; }
      set {
        battleMatchSignatureCode_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "battle_match_signature_res" field.</summary>
    public const int BattleMatchSignatureResFieldNumber = 10;
    private string battleMatchSignatureRes_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string BattleMatchSignatureRes {
      get { return battleMatchSignatureRes_; }
      set {
        battleMatchSignatureRes_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "battle_match_signature_table" field.</summary>
    public const int BattleMatchSignatureTableFieldNumber = 11;
    private int battleMatchSignatureTable_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int BattleMatchSignatureTable {
      get { return battleMatchSignatureTable_; }
      set {
        battleMatchSignatureTable_ = value;
      }
    }

    /// <summary>Field number for the "HashToAssetNames" field.</summary>
    public const int HashToAssetNamesFieldNumber = 12;
    private static readonly pbc::MapField<uint, string>.Codec _map_hashToAssetNames_codec
        = new pbc::MapField<uint, string>.Codec(pb::FieldCodec.ForUInt32(8), pb::FieldCodec.ForString(18), 98);
    private readonly pbc::MapField<uint, string> hashToAssetNames_ = new pbc::MapField<uint, string>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<uint, string> HashToAssetNames {
      get { return hashToAssetNames_; }
    }

    /// <summary>Field number for the "resNodeList" field.</summary>
    public const int ResNodeListFieldNumber = 13;
    private static readonly pb::FieldCodec<global::PbSerial.PbResNode> _repeated_resNodeList_codec
        = pb::FieldCodec.ForMessage(106, global::PbSerial.PbResNode.Parser);
    private readonly pbc::RepeatedField<global::PbSerial.PbResNode> resNodeList_ = new pbc::RepeatedField<global::PbSerial.PbResNode>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::PbSerial.PbResNode> ResNodeList {
      get { return resNodeList_; }
    }

    /// <summary>Field number for the "assetbundles" field.</summary>
    public const int AssetbundlesFieldNumber = 14;
    private static readonly pb::FieldCodec<global::PbSerial.PbAssetBundle> _repeated_assetbundles_codec
        = pb::FieldCodec.ForMessage(114, global::PbSerial.PbAssetBundle.Parser);
    private readonly pbc::RepeatedField<global::PbSerial.PbAssetBundle> assetbundles_ = new pbc::RepeatedField<global::PbSerial.PbAssetBundle>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::PbSerial.PbAssetBundle> Assetbundles {
      get { return assetbundles_; }
    }

    /// <summary>Field number for the "DlcNodes" field.</summary>
    public const int DlcNodesFieldNumber = 15;
    private static readonly pb::FieldCodec<global::PbSerial.PbDlcNode> _repeated_dlcNodes_codec
        = pb::FieldCodec.ForMessage(122, global::PbSerial.PbDlcNode.Parser);
    private readonly pbc::RepeatedField<global::PbSerial.PbDlcNode> dlcNodes_ = new pbc::RepeatedField<global::PbSerial.PbDlcNode>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::PbSerial.PbDlcNode> DlcNodes {
      get { return dlcNodes_; }
    }

    /// <summary>Field number for the "ExtStrPool" field.</summary>
    public const int ExtStrPoolFieldNumber = 17;
    private static readonly pbc::MapField<int, string>.Codec _map_extStrPool_codec
        = new pbc::MapField<int, string>.Codec(pb::FieldCodec.ForInt32(8), pb::FieldCodec.ForString(18), 138);
    private readonly pbc::MapField<int, string> extStrPool_ = new pbc::MapField<int, string>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<int, string> ExtStrPool {
      get { return extStrPool_; }
    }

    /// <summary>Field number for the "ExtracPathStrPool" field.</summary>
    public const int ExtracPathStrPoolFieldNumber = 18;
    private static readonly pbc::MapField<int, string>.Codec _map_extracPathStrPool_codec
        = new pbc::MapField<int, string>.Codec(pb::FieldCodec.ForInt32(8), pb::FieldCodec.ForString(18), 146);
    private readonly pbc::MapField<int, string> extracPathStrPool_ = new pbc::MapField<int, string>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<int, string> ExtracPathStrPool {
      get { return extracPathStrPool_; }
    }

    /// <summary>Field number for the "TypeStrPool" field.</summary>
    public const int TypeStrPoolFieldNumber = 19;
    private static readonly pbc::MapField<int, string>.Codec _map_typeStrPool_codec
        = new pbc::MapField<int, string>.Codec(pb::FieldCodec.ForInt32(8), pb::FieldCodec.ForString(18), 154);
    private readonly pbc::MapField<int, string> typeStrPool_ = new pbc::MapField<int, string>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<int, string> TypeStrPool {
      get { return typeStrPool_; }
    }

    /// <summary>Field number for the "ResPathStrPool" field.</summary>
    public const int ResPathStrPoolFieldNumber = 20;
    private static readonly pbc::MapField<int, string>.Codec _map_resPathStrPool_codec
        = new pbc::MapField<int, string>.Codec(pb::FieldCodec.ForInt32(8), pb::FieldCodec.ForString(18), 162);
    private readonly pbc::MapField<int, string> resPathStrPool_ = new pbc::MapField<int, string>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<int, string> ResPathStrPool {
      get { return resPathStrPool_; }
    }

    /// <summary>Field number for the "HashToMd5s" field.</summary>
    public const int HashToMd5SFieldNumber = 21;
    private static readonly pbc::MapField<uint, string>.Codec _map_hashToMd5S_codec
        = new pbc::MapField<uint, string>.Codec(pb::FieldCodec.ForUInt32(8), pb::FieldCodec.ForString(18), 170);
    private readonly pbc::MapField<uint, string> hashToMd5S_ = new pbc::MapField<uint, string>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<uint, string> HashToMd5S {
      get { return hashToMd5S_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PbResMap);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PbResMap other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Version != other.Version) return false;
      if (BundleVersionName != other.BundleVersionName) return false;
      if (BundleVersionCode != other.BundleVersionCode) return false;
      if (GcloudResVersion != other.GcloudResVersion) return false;
      if (BattleMatchVersion0 != other.BattleMatchVersion0) return false;
      if (BattleMatchVersion1 != other.BattleMatchVersion1) return false;
      if (BattleCompleteVersion != other.BattleCompleteVersion) return false;
      if (BattleMatchSignatureCode != other.BattleMatchSignatureCode) return false;
      if (BattleMatchSignatureRes != other.BattleMatchSignatureRes) return false;
      if (BattleMatchSignatureTable != other.BattleMatchSignatureTable) return false;
      if (!HashToAssetNames.Equals(other.HashToAssetNames)) return false;
      if(!resNodeList_.Equals(other.resNodeList_)) return false;
      if(!assetbundles_.Equals(other.assetbundles_)) return false;
      if(!dlcNodes_.Equals(other.dlcNodes_)) return false;
      if (!ExtStrPool.Equals(other.ExtStrPool)) return false;
      if (!ExtracPathStrPool.Equals(other.ExtracPathStrPool)) return false;
      if (!TypeStrPool.Equals(other.TypeStrPool)) return false;
      if (!ResPathStrPool.Equals(other.ResPathStrPool)) return false;
      if (!HashToMd5S.Equals(other.HashToMd5S)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Version.Length != 0) hash ^= Version.GetHashCode();
      if (BundleVersionName.Length != 0) hash ^= BundleVersionName.GetHashCode();
      if (BundleVersionCode != 0) hash ^= BundleVersionCode.GetHashCode();
      if (GcloudResVersion != 0) hash ^= GcloudResVersion.GetHashCode();
      if (BattleMatchVersion0 != 0UL) hash ^= BattleMatchVersion0.GetHashCode();
      if (BattleMatchVersion1 != 0UL) hash ^= BattleMatchVersion1.GetHashCode();
      if (BattleCompleteVersion != 0) hash ^= BattleCompleteVersion.GetHashCode();
      if (BattleMatchSignatureCode.Length != 0) hash ^= BattleMatchSignatureCode.GetHashCode();
      if (BattleMatchSignatureRes.Length != 0) hash ^= BattleMatchSignatureRes.GetHashCode();
      if (BattleMatchSignatureTable != 0) hash ^= BattleMatchSignatureTable.GetHashCode();
      hash ^= HashToAssetNames.GetHashCode();
      hash ^= resNodeList_.GetHashCode();
      hash ^= assetbundles_.GetHashCode();
      hash ^= dlcNodes_.GetHashCode();
      hash ^= ExtStrPool.GetHashCode();
      hash ^= ExtracPathStrPool.GetHashCode();
      hash ^= TypeStrPool.GetHashCode();
      hash ^= ResPathStrPool.GetHashCode();
      hash ^= HashToMd5S.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Version.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Version);
      }
      if (BundleVersionName.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(BundleVersionName);
      }
      if (BundleVersionCode != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(BundleVersionCode);
      }
      if (GcloudResVersion != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(GcloudResVersion);
      }
      if (BattleMatchVersion0 != 0UL) {
        output.WriteRawTag(48);
        output.WriteUInt64(BattleMatchVersion0);
      }
      if (BattleMatchVersion1 != 0UL) {
        output.WriteRawTag(56);
        output.WriteUInt64(BattleMatchVersion1);
      }
      if (BattleCompleteVersion != 0) {
        output.WriteRawTag(64);
        output.WriteInt32(BattleCompleteVersion);
      }
      if (BattleMatchSignatureCode.Length != 0) {
        output.WriteRawTag(74);
        output.WriteString(BattleMatchSignatureCode);
      }
      if (BattleMatchSignatureRes.Length != 0) {
        output.WriteRawTag(82);
        output.WriteString(BattleMatchSignatureRes);
      }
      if (BattleMatchSignatureTable != 0) {
        output.WriteRawTag(88);
        output.WriteInt32(BattleMatchSignatureTable);
      }
      hashToAssetNames_.WriteTo(output, _map_hashToAssetNames_codec);
      resNodeList_.WriteTo(output, _repeated_resNodeList_codec);
      assetbundles_.WriteTo(output, _repeated_assetbundles_codec);
      dlcNodes_.WriteTo(output, _repeated_dlcNodes_codec);
      extStrPool_.WriteTo(output, _map_extStrPool_codec);
      extracPathStrPool_.WriteTo(output, _map_extracPathStrPool_codec);
      typeStrPool_.WriteTo(output, _map_typeStrPool_codec);
      resPathStrPool_.WriteTo(output, _map_resPathStrPool_codec);
      hashToMd5S_.WriteTo(output, _map_hashToMd5S_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Version.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Version);
      }
      if (BundleVersionName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(BundleVersionName);
      }
      if (BundleVersionCode != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(BundleVersionCode);
      }
      if (GcloudResVersion != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(GcloudResVersion);
      }
      if (BattleMatchVersion0 != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(BattleMatchVersion0);
      }
      if (BattleMatchVersion1 != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(BattleMatchVersion1);
      }
      if (BattleCompleteVersion != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(BattleCompleteVersion);
      }
      if (BattleMatchSignatureCode.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(BattleMatchSignatureCode);
      }
      if (BattleMatchSignatureRes.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(BattleMatchSignatureRes);
      }
      if (BattleMatchSignatureTable != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(BattleMatchSignatureTable);
      }
      size += hashToAssetNames_.CalculateSize(_map_hashToAssetNames_codec);
      size += resNodeList_.CalculateSize(_repeated_resNodeList_codec);
      size += assetbundles_.CalculateSize(_repeated_assetbundles_codec);
      size += dlcNodes_.CalculateSize(_repeated_dlcNodes_codec);
      size += extStrPool_.CalculateSize(_map_extStrPool_codec);
      size += extracPathStrPool_.CalculateSize(_map_extracPathStrPool_codec);
      size += typeStrPool_.CalculateSize(_map_typeStrPool_codec);
      size += resPathStrPool_.CalculateSize(_map_resPathStrPool_codec);
      size += hashToMd5S_.CalculateSize(_map_hashToMd5S_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PbResMap other) {
      if (other == null) {
        return;
      }
      if (other.Version.Length != 0) {
        Version = other.Version;
      }
      if (other.BundleVersionName.Length != 0) {
        BundleVersionName = other.BundleVersionName;
      }
      if (other.BundleVersionCode != 0) {
        BundleVersionCode = other.BundleVersionCode;
      }
      if (other.GcloudResVersion != 0) {
        GcloudResVersion = other.GcloudResVersion;
      }
      if (other.BattleMatchVersion0 != 0UL) {
        BattleMatchVersion0 = other.BattleMatchVersion0;
      }
      if (other.BattleMatchVersion1 != 0UL) {
        BattleMatchVersion1 = other.BattleMatchVersion1;
      }
      if (other.BattleCompleteVersion != 0) {
        BattleCompleteVersion = other.BattleCompleteVersion;
      }
      if (other.BattleMatchSignatureCode.Length != 0) {
        BattleMatchSignatureCode = other.BattleMatchSignatureCode;
      }
      if (other.BattleMatchSignatureRes.Length != 0) {
        BattleMatchSignatureRes = other.BattleMatchSignatureRes;
      }
      if (other.BattleMatchSignatureTable != 0) {
        BattleMatchSignatureTable = other.BattleMatchSignatureTable;
      }
      hashToAssetNames_.Add(other.hashToAssetNames_);
      resNodeList_.Add(other.resNodeList_);
      assetbundles_.Add(other.assetbundles_);
      dlcNodes_.Add(other.dlcNodes_);
      extStrPool_.Add(other.extStrPool_);
      extracPathStrPool_.Add(other.extracPathStrPool_);
      typeStrPool_.Add(other.typeStrPool_);
      resPathStrPool_.Add(other.resPathStrPool_);
      hashToMd5S_.Add(other.hashToMd5S_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Version = input.ReadString();
            break;
          }
          case 26: {
            BundleVersionName = input.ReadString();
            break;
          }
          case 32: {
            BundleVersionCode = input.ReadInt32();
            break;
          }
          case 40: {
            GcloudResVersion = input.ReadInt32();
            break;
          }
          case 48: {
            BattleMatchVersion0 = input.ReadUInt64();
            break;
          }
          case 56: {
            BattleMatchVersion1 = input.ReadUInt64();
            break;
          }
          case 64: {
            BattleCompleteVersion = input.ReadInt32();
            break;
          }
          case 74: {
            BattleMatchSignatureCode = input.ReadString();
            break;
          }
          case 82: {
            BattleMatchSignatureRes = input.ReadString();
            break;
          }
          case 88: {
            BattleMatchSignatureTable = input.ReadInt32();
            break;
          }
          case 98: {
            hashToAssetNames_.AddEntriesFrom(input, _map_hashToAssetNames_codec);
            break;
          }
          case 106: {
            resNodeList_.AddEntriesFrom(input, _repeated_resNodeList_codec);
            break;
          }
          case 114: {
            assetbundles_.AddEntriesFrom(input, _repeated_assetbundles_codec);
            break;
          }
          case 122: {
            dlcNodes_.AddEntriesFrom(input, _repeated_dlcNodes_codec);
            break;
          }
          case 138: {
            extStrPool_.AddEntriesFrom(input, _map_extStrPool_codec);
            break;
          }
          case 146: {
            extracPathStrPool_.AddEntriesFrom(input, _map_extracPathStrPool_codec);
            break;
          }
          case 154: {
            typeStrPool_.AddEntriesFrom(input, _map_typeStrPool_codec);
            break;
          }
          case 162: {
            resPathStrPool_.AddEntriesFrom(input, _map_resPathStrPool_codec);
            break;
          }
          case 170: {
            hashToMd5S_.AddEntriesFrom(input, _map_hashToMd5S_codec);
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
